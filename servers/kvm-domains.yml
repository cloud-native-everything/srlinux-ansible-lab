---
# Creating Qemu instances
#
    - name: List qemu containers
      shell: "docker ps --format {{ '{{' }}.Names{{ '}}' }} | grep qemu | cat"
      register: qemu_containers
      changed_when: False

    - name: Check qemu_containers
      debug:
        msg: "qemu containers: {{ qemu_containers.stdout }}"

    - name: Copy qcow2 file to image folder for k8s instances
      copy:
        remote_src: true
        src: "{{ k8s_qcow2_image }}"
        dest: "{{ kvm_images_location }}/{{ item.name }}.qcow2"
        owner: qemu
        group: qemu
        force: no
      with_items: "{{ k8s_inst }}"
      when: "'qemu' not in qemu_containers.stdout"

# Prepare image to grow root_fs later
# CAUTION: Having been fully tested yet!
# CAUTION: You have to execute 'xfs_growfs /' inside the VM when is running to complete process
#
#    - name: Check virtual size in Originak image
#      shell: "qemu-img info {{ k8s_qcow2_image }}  | grep 'virtual size' | awk '{print $3}'"
#      register: qemu_img
#      changed_when: False
#
#    - name: Copy qcow2 temporary file to /tmp
#      copy:
#        remote_src: true
#        src: "{{ k8s_qcow2_image }}"
#        dest: "/tmp/centos-resize-temp.qcow2"
#        owner: qemu
#        group: qemu
#        force: no
#      when:
#        - root_fs_size not in qemu_img.stdout
#
#    - name: Apply qemu-img resize to images
#      command: 'qemu-img resize {{ kvm_images_location }}/{{ item.name }}.qcow2 {{ root_fs_size }}'
#      with_items: "{{ k8s_inst }}"
#      when: 
#        - root_fs_size not in qemu_img.stdout
#
#    - name: Apply virt-resize to images
#      shell: 'LIBGUESTFS_BACKEND=direct virt-resize --expand /dev/sda1 /tmp/centos-resize-temp.qcow2 {{ kvm_images_location }}/{{ item.name }}.qcow2'
#      with_items: "{{ k8s_inst }}"
#      when: 
#        - root_fs_size not in qemu_img.stdout


# Copying script to hypervisor and modify image

    - name: Check if the script guestfish-files.sh exists and have permissions
      command: ls /tmp
      register: st
      changed_when: False

    - name: Copying script to hypervisor to remove NetworkManager
      template:
        src: guestfish-files.sh.j2
        dest: '/tmp/guestfish-files-{{ item.name }}.sh'
        mode: 0755
      with_items: "{{ k8s_inst }}"
      when:
        - 'item.name not in st.stdout' 

    - name: Copying mgmt.nmconnection template
      template: 
        src: mgmt.nmconnection.j2 
        backup: no 
        dest: "/tmp/mgmt.nmconnection.{{ item.name }}"
      with_items: "{{ k8s_inst }}"
      when:
        - 'item.name not in st.stdout' 

    - name: Copying srv.nmconnection template
      template: 
        src: srv.nmconnection.j2 
        backup: no 
        dest: "/tmp/srv.nmconnection.{{ item.name }}"
      with_items: "{{ k8s_inst }}"
      when:
        - 'item.name not in st.stdout' 

    - name: Copying hostname template
      template: 
        src: hostname.j2 
        backup: no 
        dest: "/tmp/hostname.{{ item.name }}"
      with_items: "{{ k8s_inst }}"
      when:
        - 'item.name not in st.stdout' 

    - name: Copying hosts template
      template: 
        src: hosts.j2 
        backup: no 
        dest: "/tmp/hosts.{{ item.name }}"
      with_items: "{{ k8s_inst }}"
      when:
        - 'item.name not in st.stdout' 

    - name: Copying  proxy settings files
      copy:
        src: '{{ item }}'
        dest: "/tmp/{{ item }}"
        force: no
      with_items:
        - 'bash_profile'
        - 'http-proxy.conf'
        - 'dnf.conf'
        - 'kube-pks-install.sh'
        - 'calico.yaml'

    - name: Store /root/.ssh/id_rsa.pub in var pub_key
      shell: "cat ~/.ssh/id_rsa.pub"
      register: pub_key

    - name: Check pub_key
      debug: 
        msg: "Show pub_key: {{ pub_key.stdout }}"

    - name: Copying authorized_keys file to /tmp
      template:
        src: authorized_keys.j2
        backup: no
        dest: /tmp/authorized_keys

    - name: Run the script guestfish-files.sh
      shell: "/tmp/guestfish-files-{{ item.name }}.sh {{ kvm_images_location }}/{{ item.name }}.qcow2"
      with_items: "{{ k8s_inst }}"
      when:
        - 'item.name not in st.stdout'

    - name: Start qemu containers
      command: docker run -ti -d --rm --privileged --device /dev/kvm --name qemu-{{ item.name }} --network none -v /home/qemu/{{ item.name }}.qcow2:/tmp/f34-test.qcow2  -e QEMU_HDA=/tmp/f34-test.qcow2 -e QEMU_CPU={{ qemu_cpu }} -e QEMU_RAM={{ qemu_mem }} pinrojas/qemu:v0.31 
      with_items: "{{ k8s_inst }}" 
      when: "'qemu' not in qemu_containers.stdout"
 

